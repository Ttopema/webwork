1.자바스크립트 사용방법
  <script>
  </script>
  1)body태그에 정의
  2)head태그에 정의
    -자바스크립트 명령문, 함수
  3)외부문서에 정의하고 사용
  4)inline으로 태그 내부에서 정의
    -이벤트 핸들러
    
  [미션] - js_basic_exam.html
  1.exam.js작성하기
    test1함수 - alert실행
    test2함수 - confirm실행
    test3함수 - prompt실행
    
  2.문서에서 버튼을 정의하고 onclick이벤트 핸들러로 tes1t함수 연결하기
  3.문서에서 문자열을 정의하고 test2함수연결하기
  4.문서에서 image를 추가하고 하이퍼링크로 test3함수 연결하기
  5.문서에 이미지를 추가하고 이미지의 onclick이벤트 핸들러에서 test1함수 연결하기
  6.문서에 스크립트를 추가하고 콘솔에 메시지 출력하기
  7.실행화면캡쳐 후 소스파일과 제출하기
      
2.문법
  1)문장만들기
  2)변수
  3)연산자
  4)조건제어구문
    -if, switch
  5)반복제어구문
    -for, while
    
3.함수
  1)함수를 선언하고 호출하는 방법
  2)변수의 종류
    -웹 브라우저이서 자바스크립트를 해석할때 함수선운부를 가정 먼저 해석한다.
    -var로 선언된 변수를 가장 위로 끌어올려(global변수) 해석한다.
    -ECMAScript6버전 이전은 var키워드만 이용해서 변수를 선언하고 정의
    -ECMAScript6버전 이후에 let과 const가 추가됨
    -let으로 선언된 변수는 선언된 { }안에서만 사용할 수 있다.
    -ECMAScript6버전을 이용한다면 var보다는 let을 써서 변수를 정의한다.
    -let으로 선언한 변수는 재할당이 가능하다.
    -const로 선언된 변수는 상수이므로 재할당이 불가능하다.
    -var로 변수를 선언하면 중복된 선언이 가능하다.
    -let은 재선언이 불가능하다.
   
    
    -1.전역변수 (글로벌 변수)
       :자바스크립트문서 내의 모든 자바스크립트를 사용할 수 있는 곳에서 공유해서 사용할 수 있는 변수
    -2.지역변수
       :선언된 위치에만 사용할 수 있는 변수
        함수{}안에서 var키워드로 선언된 변수는 함수 내부에서만 사용할 수 있는 지역변수
   
   3)함수와 변수의 호이스팅
     -웹 브라우저이서 자바스크립트를 해석할때 함수선운부를 가정 먼저 해석한다.
     -global영역에 선언된 변수나 함수를 자바스크립트 인터프리터가 최우선의 영역으로 끌어올려서
      global속성으로 추가한다. 이를 호이스팅이라 한다.
      global영역에 추가되는 것들이 많게 되면 실제 실행될 코드의 실행 시점이 늦어질 수 있다.
     -var로 선언된 변수를 가장 위로 끌어올려(global변수) 해석한다.
     -let으로 선언된 변수는 호이스팅이 발생하지 않는다.
   
   4)표현식으로 함수 정의하기
     [형식]
     => 연산자를 이용해서 변수에 함수를 할당하는 표현
     => 정의된 함수를 할당한 변수가 함수의 이름으로 쓰여짐. 따라서 원래 함수이름은 사용할 수 없다.
     1.이름이 있는 함수의 표현식
       var 변수명 = function 함수명(매개변수list){
           //실행할 코드 
      }
     
     2.익명함수의 사용(이름이 없는 함수의 표현식)
	   var 변수명 = function(매개변수list){
           //실행할 코드 
      }
      => 익명함수는 표현식으로 주로 사용하거나 매개변수에 함수를 정의하고 바로 사용
      
   5)즉시실행함수
     -한 번만 실행함수는 실행될 곳에서 바로 선언해서 실행되도록 할 수 있다.
     -즉시 실행함수는 함수를 문장의 형태로 선언하므로 ;을 추가해야 한다.
     [문법]
     (function(){
		내용;
	 }());
4.이벤트
  -웹브라우쟈에 마우스나 키보드의 여러 움직임을 발생시키는 것을 이벤트라 한다.
   즉, 사용자가 웹페이지에서 마우스와 키보드를 가지고 하는 모든 행위
  -이벤트 종류
   click
   dbclick
   mouseover : 웹페이지의 구성요소에 마우스가 올라갈때 발생
   mouseout : 마우스가 구성요소 밖으로 이동할때 발생
   keydown : 키보드를 누르는 동안에 발생
   keypress : 키보드를 눌렀을 때 발생
   keyup : 키보드를 눌려졌다가 올라올 때 발생
   load : 웹페이지가 로딩될 때 발생
   unload : 웹페이지가 close
   blur : 포커스를 잃어버릴 때 발생
   focus : 포커스가 생겼을 때 발생
   change : 값이 변경되었을 때 발생
            선택한 목록이 바뀌거나 체크가 바뀌거나 입력한 값이 바뀌는 경우
            텍스트상자에서는 포커스가 없어질 때 이벤트가 발생한다.
   **on을 붙이면 이벤트 핸들러로 작동한다.
5.내장객체
  -브라우저마다 자바스크립트를 해석하고 실행할 수 있는 엔진이 탑재(프로그램이 포함)되어 있다.
  -자바스크립트 엔진에 포함된 객체를 내장객체라고 한다.
  [객체사용하는 방법]
  브라우저에 포함된 자바스크립트 엔진이 내장하고 있는 객체(코드로 만들어져 있는)를 사용하기 위해서 내장객체를 생성해서
  엔진에 포함된 자바스크립트 인터프리터가 실행될 때 인식할 수 있도록 해야한다.
  
  변수 = new 내장객체명();
  
  1)String객체
    => 문자열을 조작하기 위해 필요한 메소드들을 제공
  2)math객체
    =>수학, 삼각과 관련된 기능을 제공하는 객체
  3)Date객체
    => 날짜와 시간에 대해서 
  4)Array객체
    => 
6.브라우저객체(BOM - Browser Object Model)
  -브라우저를 구성하는 구성요소를 객체로 관리
  -브라우저로 실행된 결과화면을 구성하는 구성요소를 접근
   window, history, location, form객체...
  -공식표준은 없다.
  -모든 브라우저 객체는 계층구조가 있다.
   <body>
     <form>
       <input type="text" />
     </form>
   </body>  
  문서에서 text객체를 접근하고 싶은 경우 아래와 같은 방법으로 접근해야 한다. 
  window.document.form객체.text객체
  ---------------
  BOM을 이용하는 경우 window.documentsm 는 상상 써야하는 객체 계층구조이므로 생략이 가능
  window는 생략이 가능하고 form객체를 접근하는 경우 document도 생략가능
  
  -html페이지의 구성요소를 접근하기 위한 표준방법을 활용해서 접근
                                 ------
                               DOM의 접근방법을 활용하는 것이 표준
                               id, tag, class같은 선택자를 이용해서 접근
                               form객체같은 경우 name속성을 이용해서 접근
   [window객체]
   브라우저에서 상위객체
   window객체는 생략이 가능
   1)대화상자와 관련된 메소드
     -alter
     -confirm
     -prompt
   2)popup
     -open() : 새창을 실행
      window.open(경로, 이름, 옵션)
                  ---  ---  ---
                  오픈될 팝업창의 path
                       팝업창의 이름
                            오픈될 창의 크기, 위치, 구성요소 .....
     -close() : 창을 닫는다.
     -opener객체
   3)데이터처리
     parseInt : 숫자모양을 한 문자열을 숫자로 변환
     isNaN : 입력한 문자열이 숫자인지 문자인지 판단(데이터타입은 확인하지 않고 문자 모양만 가지고 판단 // 문자:true 숫자:false)
     eval : 매개변수로 전달된 메시지를 실제로 실헹(보안에 매우 취약)
     trim : 공백을 제거
     
   4)자동실행
   
7.DOM
8.사용자정의객체
9.JSON
10.JQuery
11.자바스크립트 프레임워크 및 라이브러리
12.